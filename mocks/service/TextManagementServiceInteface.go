// Code generated by mockery v2.14.1. DO NOT EDIT.

package service

import (
	entity "zcelero/entity"

	mock "github.com/stretchr/testify/mock"
)

// TextManagementServiceInteface is an autogenerated mock type for the TextManagementServiceInteface type
type TextManagementServiceInteface struct {
	mock.Mock
}

// Get provides a mock function with given fields: textId, privateKey, password
func (_m *TextManagementServiceInteface) Get(textId string, privateKey string, password string) (string, error) {
	ret := _m.Called(textId, privateKey, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(textId, privateKey, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(textId, privateKey, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: text
func (_m *TextManagementServiceInteface) Insert(text entity.TextManagement) (entity.TextManagement, error) {
	ret := _m.Called(text)

	var r0 entity.TextManagement
	if rf, ok := ret.Get(0).(func(entity.TextManagement) entity.TextManagement); ok {
		r0 = rf(text)
	} else {
		r0 = ret.Get(0).(entity.TextManagement)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.TextManagement) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTextManagementServiceInteface interface {
	mock.TestingT
	Cleanup(func())
}

// NewTextManagementServiceInteface creates a new instance of TextManagementServiceInteface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTextManagementServiceInteface(t mockConstructorTestingTNewTextManagementServiceInteface) *TextManagementServiceInteface {
	mock := &TextManagementServiceInteface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
